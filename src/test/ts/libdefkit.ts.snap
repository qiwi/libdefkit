// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`libdefkit #execute returns proper dts bundle 1`] = `
{
  "cache": "<cache>",
  "customTypings": [
    "customTypings/**/*.d.ts",
  ],
  "cwd": "<cwd>",
  "dts": "/// <reference types="node" />
declare module "@qiwi/libdefkit/target/es6/interface.js" {
    /** @module @qiwi/libdefkit */
    /** */
    import { StdioOptions } from 'node:child_process';
    export type ICmdInvokeOptions = {
        cmd: string;
        args?: string[] | TFlags;
        cwd?: string;
        silent?: boolean;
        stdio?: StdioOptions;
        closest?: boolean;
    };
    export type ICliFlags = {
        cwd?: string;
        entry?: string;
        ext?: string;
        dtsOut?: string;
        flowOut?: string;
        tsconfig?: string[];
        customTypings?: string[];
        cache?: string;
    };
    export type IContext = ICliFlags & {
        cache: string;
        cwd: string;
        name: string;
        entry: string;
        ext: string;
        dtsOut: string;
        flowOut: string;
    } & TFlags;
    export type TFlags = Record<string, string | boolean | number | Array<string | boolean | number>>;
    export type IExecPipe = (ctx: IContext) => IContext | void;
}
declare module "@qiwi/libdefkit/target/es6/util.js" {
    /** @module @qiwi/libdefkit */
    /** */
    import { StdioOptions } from 'node:child_process';
    import { ICmdInvokeOptions, TFlags } from "@qiwi/libdefkit/target/es6/interface.js";
    export const STDIO_INHERIT: StdioOptions;
    export const STDIO_NULL: StdioOptions;
    export const getCmd: (cmd: string, cwd: string, closest?: boolean, isWin?: boolean) => string;
    export const invoke: ({ cmd, args, cwd, silent, closest, stdio, }: ICmdInvokeOptions) => string;
    export const formatFlags: (flags?: TFlags, picklist?: string[]) => string[];
    export const formatArgs: (args?: string[] | TFlags, picklist?: string[]) => string[];
    export const findBin: (cmd: string, cwd: string) => string;
    export const getClosestBin: (cmd: string, cwd?: string) => string;
    export const findBase: (files: string[]) => string;
}
declare module "@qiwi/libdefkit/target/es6/dts.js" {
    import { IExecPipe } from "@qiwi/libdefkit/target/es6/interface.js";
    export const generate: (tsconfig: string, name: string, cwd: string, entryPoints: Record<string, string>, ext: string) => string;
    export const mixFiles: (files: string[], memo?: string) => string;
    export const pipe: IExecPipe;
}
declare module "@qiwi/libdefkit/target/es6/libdefkit.js" {
    import { ICliFlags, IContext, IExecPipe } from "@qiwi/libdefkit/target/es6/interface.js";
    export const normalize: IExecPipe;
    export const clear: IExecPipe;
    export const flowgen: IExecPipe;
    export const pipeline: IExecPipe[];
    export const execute: (flags: ICliFlags) => IContext;
}
declare module "@qiwi/libdefkit/target/es6/index.js" {
    /** @module @qiwi/libdefkit */
    /** */
    export * from "@qiwi/libdefkit/target/es6/libdefkit.js";
}
declare module "@qiwi/libdefkit" {
    export * from "@qiwi/libdefkit/target/es6/index.js"
}
declare module '@qiwi/libdefkitfake' {
  export const foo: string
}
",
  "dtsOut": "<cwd>/src/test/temp/index.d.ts",
  "entry": "./index.ts",
  "ext": ".js",
  "flowOut": "<cwd>/src/test/temp/index.flow.js",
  "name": "@qiwi/libdefkit",
  "tsconfig": [
    "tsconfig.es6.json",
  ],
}
`;
